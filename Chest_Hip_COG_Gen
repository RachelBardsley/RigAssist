string $spine_duplicate[] = `ls -sl`;

//#determine if L or R - in the case of the spine, it is just M for middle.
string $R_or_L = `substring $spine_duplicate[0] 1 1`;

//# Orient joints check
select $spine_duplicate[0];
joint -e  -oj xyz -secondaryAxisOrient zup -ch -zso;

//# create IK arm copy
select ($R_or_L + "_base_spine_E");
duplicate -rr;
searchReplaceNames "base" "IK" "hierarchy";
string $IK_spine[] = `ls -sl`;
int $namelen = `size $IK_spine[0]` - 1;
string $IK_spine_rename = `substring $IK_spine[0] 1 $namelen`;
rename $IK_spine[0] $IK_spine_rename;

//# create the extra twist joints in the spine
//# First we need the length of the spine divided by 2
float $spine_lengthvalue = `getAttr ($R_or_L + "_base_spine_H.translateX")`;
$spine_insert_lengthvalue = $spine_lengthvalue/3;
//# Now create joints and move it by that value.
insertJoint ($R_or_L + "_base_spine_E");
rename ($R_or_L + "_base_spine_F");
setAttr ($R_or_L + "_base_spine_F.translateX") $spine_insert_lengthvalue;

insertJoint ($R_or_L + "_base_spine_F");
rename ($R_or_L + "_base_spine_G");
setAttr ($R_or_L + "_base_spine_G.translateX") $spine_insert_lengthvalue;

setAttr ($R_or_L + "_base_spine_H.translateX") $spine_insert_lengthvalue;

//# Unparent the IK chest from the IK hips, we need them separate to do a skin bind
select -r ($R_or_L + "_IK_spine_H");
select -tgl ($R_or_L + "_spine_group");
parent;

//# Add IK spline handle
select -r ($R_or_L + "_base_spine_E");
select -add ($R_or_L + "_base_spine_H");
$spine_ikHandle = `ikHandle -sol ikSplineSolver`;
rename $spine_ikHandle[0] ($R_or_L + "_IK2_spine_ikHandle");
rename $spine_ikHandle[1] ($R_or_L + "_IK2_spine_effector");
rename $spine_ikHandle[2] ($R_or_L + "_IK2_spine_curve");

setAttr ($R_or_L + "_IK2_spine_ikHandle.visibility") 0;
setAttr ($R_or_L + "_IK2_spine_effector.visibility") 0;
setAttr ($R_or_L + "_IK2_spine_curve.visibility") 0;


//# Do the skin bind
select -r M_IK_spine_E ;
select -add M_IK_spine_H ;
select -add M_IK2_spine_curve ;
SmoothBindSkin -bcp -tsb;

//# create nicer chest and hips control with better pivots

select custom_chest_shape;
duplicate -rr;
string $tempHipsControl_1[] = `ls -sl`;
rename $tempHipsControl_1 ($R_or_L + "_IK_chest_control");
group -em -name ($R_or_L + "_IK_chest_pivotgroup");
select -cl;
select -r ($R_or_L + "_IK_chest_control");
select -tgl ($R_or_L + "_IK_chest_pivotgroup");
parent;
select -r ($R_or_L + "_IK_chest_pivotgroup");
select -tgl M_IK_spine_E;
MatchTranslation;
select -r ($R_or_L + "_IK_chest_pivotgroup");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -cl;

select custom_chest_shape;
duplicate -rr;
string $tempHipsControl_1[] = `ls -sl`;
rename $tempHipsControl_1 ($R_or_L + "_IK_chest_offset_control");
group -em -name ($R_or_L + "_IK_chest_offset_pivotgroup");
select -cl;
select -r ($R_or_L + "_IK_chest_offset_control");
select -tgl ($R_or_L + "_IK_chest_offset_pivotgroup");
parent;
select -r ($R_or_L + "_IK_chest_offset_pivotgroup");
select -tgl M_IK_spine_E;
MatchTranslation;
select -r ($R_or_L + "_IK_chest_offset_pivotgroup");
scale 0.9 0.9 0.9;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -r ($R_or_L + "_IK_chest_offset_control");
select -tgl M_IK_spine_H;
parentConstraint -mo -weight 1;

select -r ($R_or_L + "_IK_chest_offset_pivotgroup");
select -tgl ($R_or_L + "_IK_chest_control");
parent;


//# Chest toggle offset visibility
addAttr -ln "ChestOffset" -nn "Offset" -at double  -min 0 -max 1 -dv 0 ($R_or_L + "_IK_chest_control");
setAttr -e-keyable true ($R_or_L + "_IK_chest_control.ChestOffset");

connectAttr -f ($R_or_L + "_IK_chest_control.ChestOffset")($R_or_L + "_IK_chest_offset_control.visibility");

//# generates a curveInfo node for the curve
select -r ($R_or_L + "_IK2_spine_curve");
string $IK2_spine_curveinfo = `arclen -ch 1 ($R_or_L + "_IK2_spine_curve")`;
select -cl;

//# Add a choice for stretchiness!
select -cl;
select -r ($R_or_L + "_IK_chest_control");
addAttr -ln "StretchySpineSwitch" -nn "Stretchy Spine" -at double  -min 0 -max 1 -dv 1 ($R_or_L + "_IK_chest_control");
setAttr -e-keyable true ($R_or_L + "_IK_chest_control.StretchySpineSwitch");

shadingNode -asUtility blendColors -name ($R_or_L + "_StretchySpineChoice2");
connectAttr -f ($R_or_L + "_IK_chest_control.StretchySpineSwitch")($R_or_L + "_StretchySpineChoice2.blender");

//# Find spine length
shadingNode -asUtility multiplyDivide -name ($R_or_L + "_IK2_spine_curve_length");
setAttr ($R_or_L + "_IK2_spine_curve_length.operation") 2;
setAttr ($R_or_L + "_IK2_spine_curve_length.input2X") 3;
connectAttr -f ($IK2_spine_curveinfo + ".arcLength")($R_or_L + "_IK2_spine_curve_length.input1X");

float $staticspine2 = `getAttr ($IK2_spine_curveinfo + ".arcLength")`;

shadingNode -asUtility multiplyDivide -name ($R_or_L + "_IK2_spine_curve_static_length");
setAttr ($R_or_L + "_IK2_spine_curve_static_length.operation") 2;
setAttr ($R_or_L + "_IK2_spine_curve_static_length.input2X") 3;
setAttr ($R_or_L + "_IK2_spine_curve_static_length.input1X")$staticspine2;

connectAttr -f ($R_or_L + "_IK2_spine_curve_length.outputX")($R_or_L + "_StretchySpineChoice2.color1.color1R");
connectAttr -f ($R_or_L + "_IK2_spine_curve_static_length.outputX")($R_or_L + "_StretchySpineChoice2.color2.color2R");

connectAttr -f ($R_or_L + "_StretchySpineChoice2.outputR")($R_or_L + "_base_spine_H.translateX");
connectAttr -f ($R_or_L + "_StretchySpineChoice2.outputR")($R_or_L + "_base_spine_G.translateX");
connectAttr -f ($R_or_L + "_StretchySpineChoice2.outputR")($R_or_L + "_base_spine_F.translateX");
connectAttr -f ($R_or_L + "_StretchySpineChoice2.outputR")($R_or_L + "_base_spine_E.translateX");

//# Connect Twist to Chest
shadingNode -asUtility multiplyDivide -name ($R_or_L + "_twistychest1");
setAttr ($R_or_L + "_twistychest1.input2Y") -1;
connectAttr -f ($R_or_L + "_IK_chest_control.rotateY") ($R_or_L + "_twistychest1.input1Y");

shadingNode -asUtility multiplyDivide -name ($R_or_L + "_twistychest2");
setAttr ($R_or_L + "_twistychest2.input2Y") -1;
connectAttr -f ($R_or_L + "_IK_chest_offset_control.rotateY") ($R_or_L + "_twistychest2.input1Y");


shadingNode -asUtility addDoubleLinear -name ($R_or_L + "_twistychestadd");
connectAttr -f ($R_or_L + "_twistychest1.outputY") ($R_or_L + "_twistychestadd.input1");
connectAttr -f ($R_or_L + "_twistychest2.outputY") ($R_or_L + "_twistychestadd.input2");
connectAttr -f ($R_or_L + "_twistychestadd.output")($R_or_L + "_IK2_spine_ikHandle.twist");


//# create hips
//# create hips
//# create hips
//# create hips
//# create hips


//# create IK arm copy
select ($R_or_L + "_base_spine_D");
duplicate -rr;
searchReplaceNames "base" "IK" "hierarchy";
string $IK_spine[] = `ls -sl`;
int $namelen = `size $IK_spine[0]` - 1;
string $IK_spine_rename = `substring $IK_spine[0] 1 $namelen`;
rename $IK_spine[0] $IK_spine_rename;

//# create the extra twist joints in the spine
//# First we need the length of the spine divided by 2
float $spine_lengthvalue = `getAttr ($R_or_L + "_base_spine_A.translateX")`;
$spine_insert_lengthvalue = $spine_lengthvalue/3;
//# Now create joints and move it by that value.
insertJoint ($R_or_L + "_base_spine_D");
rename ($R_or_L + "_base_spine_C");
setAttr ($R_or_L + "_base_spine_C.translateX") $spine_insert_lengthvalue;

insertJoint ($R_or_L + "_base_spine_C");
rename ($R_or_L + "_base_spine_B");
setAttr ($R_or_L + "_base_spine_B.translateX") $spine_insert_lengthvalue;

setAttr ($R_or_L + "_base_spine_A.translateX") $spine_insert_lengthvalue;

//# Unparent the IK chest from the IK hips, we need them separate to do a skin bind
select -r ($R_or_L + "_IK_spine_A");
select -tgl ($R_or_L + "_spine_group");
parent;

//# Add IK spline handle
select -r ($R_or_L + "_base_spine_D");
select -add ($R_or_L + "_base_spine_A");
$spine_ikHandle = `ikHandle -sol ikSplineSolver`;
rename $spine_ikHandle[0] ($R_or_L + "_IK1_spine_ikHandle");
rename $spine_ikHandle[1] ($R_or_L + "_IK1_spine_effector");
rename $spine_ikHandle[2] ($R_or_L + "_IK1_spine_curve");

setAttr ($R_or_L + "_IK1_spine_ikHandle.visibility") 0;
setAttr ($R_or_L + "_IK1_spine_effector.visibility") 0;
setAttr ($R_or_L + "_IK1_spine_curve.visibility") 0;


//# Do the skin bind
select -r M_IK_spine_D ;
select -add M_IK_spine_A ;
select -add M_IK1_spine_curve ;
SmoothBindSkin -bcp -tsb;

//# create nicer chest and hips control with better pivots

select custom_hips_shape;
duplicate -rr;
string $tempHipsControl_1[] = `ls -sl`;
rename $tempHipsControl_1 ($R_or_L + "_IK_hips_control");
group -em -name ($R_or_L + "_IK_hips_pivotgroup");
select -cl;
select -r ($R_or_L + "_IK_hips_control");
select -tgl ($R_or_L + "_IK_hips_pivotgroup");
parent;
select -r ($R_or_L + "_IK_hips_pivotgroup");
select -tgl M_IK_spine_D;
MatchTranslation;
select -r ($R_or_L + "_IK_hips_pivotgroup");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -cl;

select custom_hips_shape;
duplicate -rr;
string $tempHipsControl_1[] = `ls -sl`;
rename $tempHipsControl_1 ($R_or_L + "_IK_hips_offset_control");
group -em -name ($R_or_L + "_IK_hips_offset_pivotgroup");
select -cl;
select -r ($R_or_L + "_IK_hips_offset_control");
select -tgl ($R_or_L + "_IK_hips_offset_pivotgroup");
parent;
select -r ($R_or_L + "_IK_hips_offset_pivotgroup");
select -tgl M_IK_spine_D;
MatchTranslation;
select -r ($R_or_L + "_IK_hips_offset_pivotgroup");
scale 0.9 0.9 0.9;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -r ($R_or_L + "_IK_hips_offset_control");
select -tgl M_IK_spine_A;
parentConstraint -mo -weight 1;

select -r ($R_or_L + "_IK_hips_offset_pivotgroup");
select -tgl ($R_or_L + "_IK_hips_control");
parent;

//# Chest toggle offset visibility
addAttr -ln "HipsOffset" -nn "Offset" -at double  -min 0 -max 1 -dv 0 ($R_or_L + "_IK_hips_control");
setAttr -e-keyable true ($R_or_L + "_IK_hips_control.HipsOffset");

connectAttr -f ($R_or_L + "_IK_hips_control.HipsOffset")($R_or_L + "_IK_hips_offset_control.visibility");

//# generates a curveInfo node for the curve
select -r ($R_or_L + "_IK1_spine_curve");
string $IK1_spine_curveinfo = `arclen -ch 1 ($R_or_L + "_IK1_spine_curve")`;
select -cl;

//# Add a choice for stretchiness!
select -cl;
select -r ($R_or_L + "_IK_hips_control");
addAttr -ln "StretchySpineSwitch" -nn "Stretchy Spine" -at double  -min 0 -max 1 -dv 1 ($R_or_L + "_IK_hips_control");
setAttr -e-keyable true ($R_or_L + "_IK_hips_control.StretchySpineSwitch");

shadingNode -asUtility blendColors -name ($R_or_L + "_StretchySpineChoice1");
connectAttr -f ($R_or_L + "_IK_hips_control.StretchySpineSwitch")($R_or_L + "_StretchySpineChoice1.blender");

//# Find spine length
shadingNode -asUtility multiplyDivide -name ($R_or_L + "_IK1_spine_curve_length");
setAttr ($R_or_L + "_IK1_spine_curve_length.operation") 2;
setAttr ($R_or_L + "_IK1_spine_curve_length.input2X") 3;
connectAttr -f ($IK1_spine_curveinfo + ".arcLength")($R_or_L + "_IK1_spine_curve_length.input1X");

float $staticspine1 = `getAttr ($IK1_spine_curveinfo + ".arcLength")`;

shadingNode -asUtility multiplyDivide -name ($R_or_L + "_IK1_spine_curve_static_length");
setAttr ($R_or_L + "_IK1_spine_curve_static_length.operation") 2;
setAttr ($R_or_L + "_IK1_spine_curve_static_length.input2X") 3;
setAttr ($R_or_L + "_IK1_spine_curve_static_length.input1X")$staticspine1;

connectAttr -f ($R_or_L + "_IK1_spine_curve_length.outputX")($R_or_L + "_StretchySpineChoice1.color1.color1R");
connectAttr -f ($R_or_L + "_IK1_spine_curve_static_length.outputX")($R_or_L + "_StretchySpineChoice1.color2.color2R");

connectAttr -f ($R_or_L + "_StretchySpineChoice1.outputR")($R_or_L + "_base_spine_A.translateX");
connectAttr -f ($R_or_L + "_StretchySpineChoice1.outputR")($R_or_L + "_base_spine_B.translateX");
connectAttr -f ($R_or_L + "_StretchySpineChoice1.outputR")($R_or_L + "_base_spine_C.translateX");
connectAttr -f ($R_or_L + "_StretchySpineChoice1.outputR")($R_or_L + "_base_spine_D.translateX");

//# Connect Twist to Hips
shadingNode -asUtility multiplyDivide -name ($R_or_L + "_twistyhips1");
setAttr ($R_or_L + "_twistyhips1.input2Y") -1;
connectAttr -f ($R_or_L + "_IK_hips_control.rotateY") ($R_or_L + "_twistyhips1.input1Y");

shadingNode -asUtility multiplyDivide -name ($R_or_L + "_twistyhips2");
setAttr ($R_or_L + "_twistyhips2.input2Y") -1;
connectAttr -f ($R_or_L + "_IK_hips_offset_control.rotateY") ($R_or_L + "_twistyhips2.input1Y");


shadingNode -asUtility addDoubleLinear -name ($R_or_L + "_twistyhipsadd");
connectAttr -f ($R_or_L + "_twistyhips1.outputY") ($R_or_L + "_twistyhipsadd.input1");
connectAttr -f ($R_or_L + "_twistyhips2.outputY") ($R_or_L + "_twistyhipsadd.input2");
connectAttr -f ($R_or_L + "_twistyhipsadd.output")($R_or_L + "_IK1_spine_ikHandle.twist");

//# Create Waist
//# Create Waist
//# Create Waist
//# Create Waist
//# Create Waist
//# Create Waist

select custom_waist_shape;
duplicate -rr;
string $tempWaistControl_1[] = `ls -sl`;
rename $tempWaistControl_1 ($R_or_L + "_waist_control");
group -em -name ($R_or_L + "_waist_pivotgroup");
select -cl;
select -r ($R_or_L + "_waist_control");
select -tgl ($R_or_L + "_waist_pivotgroup");
parent;
select -r ($R_or_L + "_waist_pivotgroup");
select -tgl ($R_or_L + "_base_spine_D");
MatchTranslation;
select -r ($R_or_L + "_waist_pivotgroup");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;

select custom_waist_offset_shape;
duplicate -rr;
string $tempWaistControl_1[] = `ls -sl`;
rename $tempWaistControl_1 ($R_or_L + "_waist_offset_control");
group -em -name ($R_or_L + "_waist_offset_pivotgroup");
select -cl;
select -r ($R_or_L + "_waist_offset_control");
select -tgl ($R_or_L + "_waist_offset_pivotgroup");
parent;
select -r ($R_or_L + "_waist_offset_pivotgroup");
select -tgl ($R_or_L + "_base_spine_D");
MatchTranslation;
select -r ($R_or_L + "_waist_offset_pivotgroup");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;

select -r ($R_or_L + "_waist_offset_control");
select -tgl ($R_or_L + "_IK_spine_D");
parentConstraint -mo -weight 1;
select -r ($R_or_L + "_waist_offset_control");
select -tgl ($R_or_L + "_IK_spine_E");
parentConstraint -mo -weight 1;

select -r ($R_or_L + "_waist_offset_pivotgroup");
select -tgl ($R_or_L + "_waist_control");
parent;

//# Waist toggle offset visibility
addAttr -ln "WaistOffset" -nn "Offset" -at double  -min 0 -max 1 -dv 0 ($R_or_L + "_waist_control");
setAttr -e-keyable true ($R_or_L + "_waist_control.WaistOffset");

connectAttr -f ($R_or_L + "_waist_control.WaistOffset")($R_or_L + "_waist_offset_control.visibility");

//# Organise controls
select -cl;
select -r ($R_or_L + "_IK_chest_pivotgroup");
select -tgl ($R_or_L + "_IK_hips_pivotgroup");
select -tgl ($R_or_L + "_IK1_spine_ikHandle");
select -tgl ($R_or_L + "_IK2_spine_ikHandle");
select -tgl ($R_or_L + "_waist_pivotgroup");
parent;

//# make COG nurb controls
circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 28 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -n ($R_or_L + "_COGA_control");
select -tgl ($R_or_L + "_base_spine_A");
MatchTranslation;
select -cl;
select -r ($R_or_L + "_COGA_control");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -cl;

circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -n ($R_or_L + "_COGB_control");
select -tgl ($R_or_L + "_base_spine_A");
MatchTranslation;
select -cl;
select -r ($R_or_L + "_COGB_control");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -cl;

circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 22 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -n ($R_or_L + "_COGC_control");
select -tgl ($R_or_L + "_base_spine_A");
MatchTranslation;
select -cl;
select -r ($R_or_L + "_COGC_control");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;
select -cl;

select -r ($R_or_L + "_COGC_control");
select -tgl ($R_or_L + "_COGB_control");
parent;
select -r ($R_or_L + "_COGB_control");
select -tgl ($R_or_L + "_COGA_control");
parent;

circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 18 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -n ($R_or_L + "_FK_hips_control");
group -em -name ($R_or_L + "_FK_hips_pivotgroup");
select -r ($R_or_L + "_FK_hips_control");
select -tgl ($R_or_L + "_FK_hips_pivotgroup");
parent;
select -r ($R_or_L + "_FK_hips_pivotgroup");
select -tgl ($R_or_L + "_base_spine_A");
MatchTranslation;
select -r ($R_or_L + "_FK_hips_pivotgroup");
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;

select -r ($R_or_L + "_waist_pivotgroup");
select -tgl ($R_or_L + "_FK_hips_control");
parent;

//# Extra COGs vis control
addAttr -ln "ExtraCogs" -nn "Extra Cogs" -at double  -min 0 -max 1 -dv 0 ($R_or_L + "_COGA_control");
setAttr -e-keyable true ($R_or_L + "_COGA_control.ExtraCogs");

connectAttr -f ($R_or_L + "_COGA_control.ExtraCogs")($R_or_L + "_COGB_control.visibility");
connectAttr -f ($R_or_L + "_COGA_control.ExtraCogs")($R_or_L + "_COGC_control.visibility");

//# Organise controls to COG
select -r ($R_or_L + "_COGC_control");
select -tgl ($R_or_L + "_FK_hips_pivotgroup");
parentConstraint -mo -weight 1;
select -cl;

//# Dump them into a collective group for tidiness.
group -em -name ($R_or_L + "_body_controls");
select -r ($R_or_L + "_COGA_control");
select -tgl ($R_or_L + "_FK_hips_pivotgroup");
select -tgl ($R_or_L + "_body_controls");
parent;

//# Complete by adding the controls to the correct display layer (red for right, blue for left). Creates the display layer if it doesn't already exist.
if( `objExists ($R_or_L + "_controls")` ) {

} else {
    createDisplayLayer -name ($R_or_L + "_controls") -number 1 -empty;
    if ( $R_or_L == "M" ) {
setAttr ($R_or_L + "_controls.displayType") 0; setAttr ($R_or_L + "_controls.color") 22; setAttr ($R_or_L + "_controls.overrideColorRGB") 0 0 0; setAttr ($R_or_L + "_controls.overrideRGBColors") 0; 
} }

	connectAttr -f ($R_or_L + "_controls.drawInfo") ($R_or_L + "_body_controls.drawOverride");


